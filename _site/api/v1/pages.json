{"entries":[{"skip_index":true,"title":"About","url":"/about/","tags":[],"body":"Hi, I’m Wole and I’m a nomad, web and mobile developer. In my spare time I get my hands dirty with security and penetration testing and I read a lot about random subjects like tourism, business and startups, etc. Outside my technical background, I enjoy Traveling Hanging out with friends and meeting new people I listen to a lot of music genres Watch movies when I can Not being a fashionable person I currently work at Cool FM Nigeria as a Mobile Developer. I’ve previously had gigs and worked with Riby Finance: I worked as a mobile developer Doubled up as a backend developer Did dev ops a couple of times Play Nigeria: I was a co-founder Worked as devops All so did full stack development Aiico Insurance PLC: Worked as an application support intern Doubled up as an hardware support intern Trippled up as a mobile app tester Taja: Worked as an intern web developer Cash Envoy: Worked as an intern web developer Access Bank: Worked with a team to install ATM software nationwide Some of my technical skills Operating Systems: *nix Macintosh Languages: Javascript Python Dart HTML & CSS PHP (rusty) Any other language required to get the job done Frameworks: React-Native Ionic Cordova Wordpress Angular Flask Jekyll Django NodeJS Any other framework required to get the job done Libraries: Jinja 2/Nunjucks Handlebars Any other required opensource library with good support and docs Database: MongoDB MySQL SQLite Couch DB Pouch DB Postgres Redis Tooling: Git Npm VSCode XCode Terminal Postman CI/CD Any other tool required to get the job done Some of my soft skills Good communicator Works better in a team Good leader I adapt to new environment and situations fast Incredible at learning fast and learning on the job Problem solving ability. I smash complex problems into the molecular ones. Critical thinking and bbservation Great at conflict resolution Great with people! Projects I try to write about projects I find interesting. Find a couple on My project page My github page Impressed? Hire me before your competitor does and crushes you!!! If I fit as the person you need to take your company or business to the next level, what are you waiting for? Find a pdf version here, shoot me a mail or slide in my twitter DM"},{"title":"Blog","url":"/blog/","tags":[],"body":"Nov 14 2020 Investigating Shortened URLs Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) Mar 14 2018 Jekyll and Chill « page 1 of 4 »"},{"title":"Home","url":"/","tags":[],"body":""},{"title":"Projects","url":"/projects/","tags":[],"body":"Apr 01 2018 Yoruba-Names"},{"title":"Tags","url":"/tags/","tags":[],"body":"Tags markdown elements components extra jekyll hello REST API SOAP XML JSON bootstrap apple screen mobile resolution samsung blackberry lumia infinix blog wordpress bored flask ionic github aboki naira python javascript angular cordova hybrid MEAN nodejs app android slack slackbot microsoft bots robots tay stackify gitify pip heroku storage offline online web localstorage sqlite pouchdb lokijs databases browser chrome graphql PWA HTTP security hacker pypi freeze malware yoruba-names git mocha travis-ci webpack es6 whogohost DNS zoho google adsense analytics npm lagos nomad nigeria tour travel review explore fun ios coffee cafe neo victoria island programmer caffiene osint investigations #markdown Feb 24 2016 Markdown Common Elements Feb 24 2016 Markdown Extra Components Feb 25 2016 Markdown Extraa Components #elements Feb 24 2016 Markdown Common Elements #components Feb 24 2016 Markdown Extra Components Feb 25 2016 Markdown Extraa Components #extra Feb 24 2016 Markdown Extra Components Feb 25 2016 Markdown Extraa Components #jekyll Dec 20 2016 Hello World! Jul 24 2017 Blogging is hard Mar 14 2018 Jekyll and Chill #hello Dec 20 2016 Hello World! #REST Dec 26 2016 Rest In Peace Aug 31 2017 GraphQL and Chill Sep 20 2017 Mama PUT, Aboki PATCH #API Dec 26 2016 Rest In Peace Aug 03 2017 Out of Boredom series Aug 31 2017 GraphQL and Chill Sep 20 2017 Mama PUT, Aboki PATCH #SOAP Dec 26 2016 Rest In Peace #XML Dec 26 2016 Rest In Peace #JSON Dec 26 2016 Rest In Peace #bootstrap Jan 02 2017 New Year Resolutions #apple Jan 02 2017 New Year Resolutions #screen Jan 02 2017 New Year Resolutions #mobile Jan 02 2017 New Year Resolutions Aug 03 2017 Out of Boredom series Aug 17 2017 Storage for Usage Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #resolution Jan 02 2017 New Year Resolutions #samsung Jan 02 2017 New Year Resolutions #blackberry Jan 02 2017 New Year Resolutions #lumia Jan 02 2017 New Year Resolutions #infinix Jan 02 2017 New Year Resolutions #blog Jul 24 2017 Blogging is hard #wordpress Jul 24 2017 Blogging is hard #bored Aug 03 2017 Out of Boredom series #flask Aug 03 2017 Out of Boredom series #ionic Aug 03 2017 Out of Boredom series Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #github Aug 03 2017 Out of Boredom series Aug 16 2017 Rise of the Machines - 1 Oct 27 2017 Something Light Mar 14 2018 Jekyll and Chill Apr 01 2018 Yoruba-Names #aboki Aug 03 2017 Out of Boredom series Sep 20 2017 Mama PUT, Aboki PATCH #naira Aug 03 2017 Out of Boredom series #python Aug 03 2017 Out of Boredom series Aug 16 2017 Rise of the Machines - 1 Oct 27 2017 Captain Freeze #javascript Aug 03 2017 Out of Boredom series Aug 17 2017 Storage for Usage Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #angular Aug 03 2017 Out of Boredom series #cordova Aug 03 2017 Out of Boredom series Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #hybrid Aug 03 2017 Out of Boredom series Aug 17 2017 Storage for Usage Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #MEAN Aug 03 2017 Out of Boredom series #nodejs Aug 03 2017 Out of Boredom series Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #app Aug 03 2017 Out of Boredom series Aug 17 2017 Storage for Usage Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #android Aug 03 2017 Out of Boredom series Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #slack Aug 16 2017 Rise of the Machines - 1 #slackbot Aug 16 2017 Rise of the Machines - 1 #microsoft Aug 16 2017 Rise of the Machines - 1 #bots Aug 16 2017 Rise of the Machines - 1 #robots Aug 16 2017 Rise of the Machines - 1 #tay Aug 16 2017 Rise of the Machines - 1 #stackify Aug 16 2017 Rise of the Machines - 1 #gitify Aug 16 2017 Rise of the Machines - 1 #pip Aug 16 2017 Rise of the Machines - 1 Oct 27 2017 Captain Freeze #heroku Aug 16 2017 Rise of the Machines - 1 #storage Aug 17 2017 Storage for Usage #offline Aug 17 2017 Storage for Usage #online Aug 17 2017 Storage for Usage #web Aug 17 2017 Storage for Usage Nov 14 2020 Investigating Shortened URLs #localstorage Aug 17 2017 Storage for Usage #sqlite Aug 17 2017 Storage for Usage #pouchdb Aug 17 2017 Storage for Usage #lokijs Aug 17 2017 Storage for Usage #databases Aug 17 2017 Storage for Usage #browser Aug 17 2017 Storage for Usage #chrome Aug 17 2017 Storage for Usage #graphql Aug 31 2017 GraphQL and Chill #PWA Aug 31 2017 GraphQL and Chill #HTTP Sep 20 2017 Mama PUT, Aboki PATCH #security Oct 27 2017 Captain Freeze Nov 14 2020 Investigating Shortened URLs #hacker Oct 27 2017 Captain Freeze Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) Nov 14 2020 Investigating Shortened URLs #pypi Oct 27 2017 Captain Freeze #freeze Oct 27 2017 Captain Freeze #malware Oct 27 2017 Captain Freeze Nov 14 2020 Investigating Shortened URLs #yoruba-names Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #git Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #mocha Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #travis-ci Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #webpack Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #es6 Oct 27 2017 Something Light Apr 01 2018 Yoruba-Names #whogohost Mar 14 2018 Jekyll and Chill #DNS Mar 14 2018 Jekyll and Chill #zoho Mar 14 2018 Jekyll and Chill #google Mar 14 2018 Jekyll and Chill #adsense Mar 14 2018 Jekyll and Chill #analytics Mar 14 2018 Jekyll and Chill #npm Apr 01 2018 Yoruba-Names #lagos Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #nomad Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #nigeria Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #tour Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #travel Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #review Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #explore Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #fun Apr 19 2018 Tours With A Lagos Nomad Jun 24 2018 TWLN: Cafe Néo Review #ios Jun 24 2018 Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1) #coffee Jun 24 2018 TWLN: Cafe Néo Review #cafe Jun 24 2018 TWLN: Cafe Néo Review #neo Jun 24 2018 TWLN: Cafe Néo Review #victoria Jun 24 2018 TWLN: Cafe Néo Review #island Jun 24 2018 TWLN: Cafe Néo Review #programmer Jun 24 2018 TWLN: Cafe Néo Review #caffiene Jun 24 2018 TWLN: Cafe Néo Review #osint Nov 14 2020 Investigating Shortened URLs #investigations Nov 14 2020 Investigating Shortened URLs"},{"title":"Tours","url":"/tours/","tags":[],"body":"Jun 24 2018 TWLN: Cafe Néo Review Apr 19 2018 Tours With A Lagos Nomad"},{"title":"Blog","url":"/blog/2/","tags":[],"body":"Oct 27 2017 Something Light Oct 27 2017 Captain Freeze Sep 20 2017 Mama PUT, Aboki PATCH Aug 31 2017 GraphQL and Chill Aug 17 2017 Storage for Usage « page 2 of 4 »"},{"title":"Blog","url":"/blog/3/","tags":[],"body":"Aug 16 2017 Rise of the Machines - 1 Aug 03 2017 Out of Boredom series Jul 24 2017 Blogging is hard Jan 02 2017 New Year Resolutions Dec 26 2016 Rest In Peace « page 3 of 4 »"},{"title":"Blog","url":"/blog/4/","tags":[],"body":"Dec 20 2016 Hello World! Feb 25 2016 Markdown Extraa Components Feb 24 2016 Markdown Extra Components Feb 24 2016 Markdown Common Elements « page 4 of 4 »"},{"title":"","url":"/FAQ.md","tags":[],"body":"# FAQ: - Article: How to Install Jekyll - by [Arti Annaswamy](https://github.com/aannasw). [Part 1](http://artiannaswamy.com/build-a-github-blog-part-1) and [Part 2](http://artiannaswamy.com/build-a-github-blog-part-2) - [Emojis in the projects list?](https://github.com/sergiokopplin/indigo/issues/72) - [Nokogiri dependencie problems?](https://github.com/sergiokopplin/indigo/issues/81) - [Syncing a Fork](https://help.github.com/articles/syncing-a-fork/) - [Tests with Travis CI - Tutorial](http://www.raywenderlich.com/109418/travis-ci-tutorial) - [Why Sass?](https://github.com/sergiokopplin/indigo/issues/117) - [Jekyll Example](https://github.com/barryclark/jekyll-now) - how to clone, run and edit jekyll configs"},{"title":"","url":"/README.md","tags":[],"body":"## Personal Website"},{"title":"Markdown Common Elements","url":"/markdown-common-elements/","tags":["markdown","elements"],"body":"Summary: You can pick as item to see how to apply in markdown. Comum Elements Basic formatting Headings Lists Paragraph Modifiers Urls Horizontal Rule Images Code Basic formatting This note demonstrates some of what Markdown is capable of doing. And that’s how to do it. This note **demonstrates** some of what [Markdown][some/link] is *capable of doing*. Headings There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character. But we are using just 4 of them. Headings can be small Headings can be small Headings can be small Headings can be small # Heading ## Heading ### Heading #### Heading Lists Ordered list Item 1 A second item Number 3 1. Item 1 2. A second item 3. Number 3 Unordered list An item Another item Yet another item And there’s more… * An item * Another item * Yet another item * And there's more... Paragraph modifiers Quote Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used. > Here is a quote. What this is should be self explanatory. URLs URLs can be made in a handful of ways: A named link to Mark It Down. Another named link to Mark It Down Sometimes you just want a URL like http://markitdown.net/. * A named link to [MarkItDown][3]. * Another named link to [MarkItDown](http://markitdown.net/) * Sometimes you just want a URL like . Horizontal rule A horizontal rule is a line that goes across the middle of the page. It’s sometimes handy for breaking things up. --- Images Markdown can also contain images. I’ll need to add something here sometime. ![Markdowm Image][/image/url] Figure Caption? ![Markdowm Image][/image/url] Photo by John Doe Photo by John Doe Bigger Images? ![Markdowm Image][/image/url]{: class=\"bigger-image\" } Code A HTML Example: Document Just a test A CSS Example: pre { padding: 10px; font-size: .8em; white-space: pre; } pre, table { width: 100%; } code, pre, tt { font-family: Monaco, Consolas, Inconsolata, monospace, sans-serif; background: rgba(0,0,0,.05); } A JS Example: // Sticky Header $(window).scroll(function() { if ($(window).scrollTop() > 900 && !$(\"body\").hasClass('show-menu')) { $('#hamburguer__open').fadeOut('fast'); } else if (!$(\"body\").hasClass('show-menu')) { $('#hamburguer__open').fadeIn('fast'); } });"},{"title":"Markdown Extra Components","url":"/markdown-extra-components/","tags":["markdown","components","extra"],"body":"Summary: You can pick as item to see how to apply in markdown. Especial Elements Evidence Side-by-Side Star Especial Breaker Spoiler External Elements Gist Codepen Slideshare Videos Evidence You can try the evidence! Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else. Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else. Side-by-side Like the Medium component. Image on the left and Text on the right: Photo by John Doe Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Photo by John Doe Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Text on the left and Image on the right: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Photo by John Doe Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Photo by John Doe Star You can give evidence to a post. Just add the tag to the markdown file. star: true Especial Breaker You can add a especial hr to your text. Spoiler You can add an especial hidden content that appears on hover. your content Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Gist You can add Gists from github. { % gist sergiokopplin/91ff4220480727b47224245ee2e9c291 % } Just a Test! Working! Codepen You can add Pens from Codepen. See the Pen Crappy Recreation of the Book Cover of *The Flame Alphabet* by Chris Coyier (@chriscoyier) on CodePen. See the Pen Crappy Recreation of the Book Cover of *The Flame Alphabet* by Chris Coyier (@chriscoyier) on CodePen. Slideshare Add your presentations here! Videos Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post! Example"},{"title":"Markdown Extraa Components","url":"/markdown-extra-components/","tags":["markdown","components","extra"],"body":"alert(document.domain);"},{"title":"Hello World!","url":"/hello-world/","tags":["jekyll","hello"],"body":"A short story. ME: Dear world, I have heard about you. I heard you are so complex. It's finally nice to meet you one on one. How do i go about being your friend? WORLD: Here's a few way to get started. Hello world in C #include int main(){ printf(\"Hello, World! \\n\"); return 0; } Hello world in C-Sharp using System; namespace HelloWorldApplication{ class HelloWorld{ static void Main(string[] args){ Console.WriteLine(\"Hello World!\"); Console.ReadKey(); } } } Hello world in C++ #include int main (){ cout Hello World! Hello world in Java class HelloWorld { public static void main (String args[]) { System.out.println(\"Hello World!\"); } } Hello world in Javascript document.write(\"Hello World!\"); Hello world in Php Hello world in Python #!/usr/bin/env python print \"Hello World!\"; Hello world in Ruby puts \"Hello World!\"; Even though there are hundreds of programming languages out there, if you will ever learn programming, you'll probably learn one of the above. Every language has it's pros and cons, so an hello world program does not necessarily define all the features and complexity or simplicity of the language. Just incase there's a popular language I left out, leave me a message on my Twitter and I'll include it."},{"title":"Rest In Peace","url":"/rest-in-peace/","tags":["REST","API","SOAP","XML","JSON"],"body":"Yet another concept. ME: Arrgh! There are so many programming concepts to learn, I don't think i can do this! I think i need to REST. When i started off with development, I got to a stage where i needed to present layers of information to enable me build other little clients on top of this data. The trad way would be to build this smaller clients on top of the same database, something like building facebook off a set of data, and also building twitter off that same set of data. Yes it would work but deep down i knew it wasn't efficient and didn't cut to the chase quick and well enough. So i did what we would all do, Google. I think it took me less than a minute to discover something called an API. Whaaaaaat!!! Another programming concept i have to understand? like spending a full week understanding how polymorphism and abstraction works wasn't enough???. It took a while to fully grasp the concept, say two days of consistent reading, even when i go to \"dump data\" in the toilet, or helping out my mum in the kitchen(Yes i cook...very well). So, what i would be writing about today is how to understand API and one of the major trends in API called REST in peace without you dying first. So below are some topics i would try to cover. 1- What is an API? 2- RESTlessness (aka SOAP) 3- RESTfulness 1- What is an API? An API is an acronym and it stands for Application Programming Interface. To easily understand it, see an API as an interface to some underlying data that you can program applications on top. You see, very easy - an interface to some underlying data that you can program applications on top. And this \"interface\" usually comes with some sort of document telling you what you can do on top of this interface. This document is called the API Documentation. This is all you have to know basically about what an API is. 2- RESTlessness (aka SOAP) It is an acronym for Simple Object Access Protocol. It is somewhat a defacto for sharing data across enterprise systems in enterprise organizations. It is designed for distributed systems. It uses XML. It so old, jeez. But many IDEs support SOAP development. So, that's basically what you need to know about SOAP. I'm trying my best to keep it simple and stay away from some technical terms. But once you understand these basics, you can always learn more complex stuff. The concept would still stick in your head and the complex stuffs will all start to make sense. 3- RESTfulness It is an acronym for Representational State Transfer. It is somewhat a defacto for building APIs these days. It's lightweight. You really don't have to bother about bandwidth. It uses Json as defacto and XML for data representation. REST is safe. Almost any client(terminal, mobile apps, web browser,etc) can consume(use or act on) REST data. You can even use it to expose data over the internet. It's the new cool kid on the block and everyone is using it. eg Facebook, Twitter, etc. That's basically what you need to know about REST. And like i said once you understand these basics, you can always learn more complex stuff. The concept would still stick in your head and complex the stuffs will all start to make sense. I'm currently working on a simple REST API project - this will cover a lot of topics in implementation such as validation, expiration, authentication, etc. I'll talk about my challenges and how i fixed them in some other post and show you my implementation. Just incase there's anything i left out, missed or anything, leave me a message on my Twitter and I'll include, correct, or ackwnowledge it. Merry Christmas, Happy Boxing Day and a very prosperous new year in advance."},{"title":"New Year Resolutions","url":"/new-year-resolutions/","tags":["bootstrap","apple","screen","mobile","resolution","samsung","blackberry","lumia","infinix"],"body":"New year and time conspiracy ME: Speaking from a pythonic perspective, has anyone noticed that Time is just a recursive function that yeilds a value and just picks up from the last yielded value when it calls itself again? hmmmm It's a new year again, and i'm glad we all made it, even though we might not have hit every target we set for ourselves in 2016, or we are not where we visioned ourselves to be yet, let's see 2017 as another opportunity to hit that goal. As usual, i'm sure many of us got tons of brodcast messages wishing us a happy new year, this and that, but wait, am i the only one bored out from hearing the usual new year resolutions like \"New year, new me\", \"New year, new system\", etc ? I have recieved tons of broadcasts (Most of them having a warning tone) asking not to mess with them this year, etc. and i'm just tired. This whole resolution thing inspired me to share my exprience with resolutions, why and how i feel they are important. I'm not talking about the \"New year, new me\" resolutions, but Screen Resolutions. My experience with screen resolutions Back in my first days of development, i had learnt how to code css, which i found stressful, but it was needed. One of my major headaches when learning css was defining break points for screen sizes. I just didn't get it, and i still haven't gotten it. It was in this my predicament i came across responsive css libraries like Bootstrap which made life easy. With these libraries, breakpoints for most screen types and devices have been implemented. Now all i do is pick up the library - the minified version just for speed optimization, CDNify it - for speed optimization too, and use the rules in my html code. Easy life. Why and how i think they are important. If you are reading this blog post, chances are that you are doing so from your mobile device - Smartphone or Tablet, and the way this post is displayed for you is going to be different from when you view it on your desktop computer or laptop. Your device screen resolution is responsible for this. I have listed a few reasons i think resolutions are important in a user interface design. They define breakpoints in our user interface. They allow us have different views on different devices. They are key elements in designing a responsive user interface. There might be other importance of screen resolutions, professional designers will be able to say more about how important they are in our user interface design and presentation. Css libraries you can check out Bootstrap. Pure Css. Materialize Css. Effeckt. Skeleton. Just a few of the many available css libraries that allow mobile responsiveness. Popular devices and their screen resolutions Apple Ipad 1 and 2 - 1224x768 Apple Iphone 6 and 6s - 1334x750 Apple Iphone 6+ and 6s+ - 1920x1080 Blackberry Playbook - 1024x600 Blackberry z10 - 1280x768 Blackberry q10 - 720x720 Infinix Hot 2 - 720x1280 Lenovo Thinkpad - 1280x800 Lumia 900 - 480x800 Samsung Galaxy 3 - 1280x720 Samsung j1 Ace - 480x800 Samsung s4 and s5 - 1920x1080 Samsung s6, s6 Edge, s6 Edge+ - 2560x1440 Samsung s7, s7 Edge - 2560x1440 These are just a few of popular devices in my location and as we all know, there are soooooooooooooooooooooooo many devices and you can't afford not to use a reponsive user interface based on the resolutions of these devices. And good thing that the popular breakpoints for most devices such as 1280, 1024, 800, 720, 600, 480, 320 are implemented by most responisive css libraries out there, and if you ever want to write your own custom css code or css library, you have to take screen resolutions keenly, because they are what defines respnsiveness of your user interface on different devices of your users. Like i always say, just incase there's anything i left out, missed or anything, leave me a message on my Twitter and I'll include, correct, or ackwnowledge it.Happy new year once again."},{"title":"Blogging is hard","url":"/blogging-is-hard/","tags":["blog","jekyll","wordpress"],"body":"Quick Story ME: January 1: It's a new year. I want to start blogging and I will write one blog post every week and be famous at the end of the year. ME: Today: ...writing my 4th post this year. Whoaaaa! What a year it has been! When this year started, I had big dreams. Write a blog post every week, meet Mark Zuckerberg (tbh this almost happend, i was stucked in traffic to CCHUB, when i got there, Uncle Mark had left **sobs**), launch a rocket, travel the whole world in one week, etc, etc, etc, and right now, I'm far away from those set targets. Blogging or dy/dx ? dy/dx please! Why? Because blogging is so difficult. Really, it is. Blogging for me isn't difficult because There's no idea of what to write or Because I don't plan on earning money or etx, etc, etc. Blogging for me is difficult because I don't have time. How do you guys do it? Personally, I'm going to try to start dedicating more time to blogging. It seems it's needed if you are going to have that bombing tech resume (Because every top tier tech guy I know has a little blog). Here's what i plan to do: Make time for blogging, at least one post a week isn't too bad i think. Write down everything (every problem) i google everyday and make blog post on the most interesting ones. Try to be consistent. If you are already familiar with blogging, please feel free to tweet at me to help my career! Blogging or Togo’s Jollof Rice? Togo's Jollof Rice please! Just because i'm eating Mama Togo's jollof rice right now. Techies at yaba can testify to this woman's jollof rice. I'm not saying it's better than the Nigerian Jollof tho, but damn ..."},{"title":"Out of Boredom series","url":"/out-of-boredom-series/","tags":["bored","flask","ionic","API","github","aboki","naira","python","javascript","angular","cordova","hybrid","MEAN","nodejs","mobile","app","android"],"body":"Unboring Boredom Fact I did a quick five minute search on google looking for intersting boredom facts. Guess what? I got bored doing that. Please don't get bored reading this post. I got bored at work today. I had stuff to do but my mortal self didnt want to cooperate. I tried so many activities trying to clear my head. I took a walk, ate, tried to watch a movie, listend to music, etc. None worked so i gave up. I guess i was bored (of work?) While scribling and scrambling around, I stumbled on a Github project by Akinjide Bankole. The project allows us to view black market currency rate instantly in your terminal! (Nigeria Only) and it worked by scraping data from AbokiFX. Try it out by in your terminal: $ sudo pip install aboki $ aboki --help Okay so how does this relate to boredom? Long story short out of boredom, I built a minified API around it and built a mobile app that allows you to see the current exchange rate in US Dollars, Great Britain Pounds and Euros. STACK for the API Python Flask Flask-Restful Flask-CORS Tornado Aboki STACK for the Mobile App Ionic 1.x Cordova AngularJS NodeJS Ok cool stuff, but you’ve still not said your plan to conquer boredom Personally I'll be building small time apps and blogging about them in the \"Out of boredom series\" when i'm bored so i can \"Unbore myself\" Still make the best out of lost time Learn new things Remain creative etc, etc, etc. Where’s the API at? Hosted on a personal server, but check out My Github. Where’s the Mobile App at? Get it on My Google Drive. My Github."},{"title":"Rise of the Machines - 1","url":"/exploring-slackbots/","tags":["slack","slackbot","microsoft","bots","robots","tay","github","stackify","gitify","python","pip","heroku"],"body":"Are bots really the future? Microsoft made a teenage bot called Tay that ended up tweeting racist and offensive messages. Follow Tay on twitter. I’ve always wondered about bots and the dark magic behind them and have always wanted to write one, even if the only thing it could do was say “Hello World!”. Apprently, bots are just: A simple program that does automated tasks (in-app cron jobs???). They come in different types: Good bots, bad bots, ugly bots, chat bots, robots, this bot, that bot, etc bots. and any other interesting stuff you find about bots out there. Slack Bots These days, I spend a lot of time on slack, just after whatsapp and twitter. Apart fro slack being a great place to manage a team or community, the adoption of bots have made that very interesting. Currently I’m in 19 open slack communities. This has been a great way to learn new things, share problems, keep up to date with the technologies I use, meet new people, etc. Recently, there was a need for me to create and start managing an open community. and i saw this as a perfect chance to venture into buillding bots starting with Slackbots. Getting started I won’t be going into technical details, just a summary of how i was able to build my first slack bot and went ahead to build two other useful and real life applicable slack bots, Stackify nd Gitify Slack Bots. I’ll bulletify the summary just because i like the sound of “ify”. I googled “building your first slack bot”. I discovered there were two popular way of building bots, using NodeJS and Python. Also there were different ways of deploying your bot. Two popular way is to use Heroku or self host them. I decided to use python because i’ve been writing python longer than NodeJS. I followed a tutorial from Fullstack Python. I self hosted it and tested it in the slack community i was building. And that was how i build my first slack bot. Stackify Slackbot This slack bot helps you to search Stack Overflow for matching answers to your issues. E.g to search for answers relating to “Broken pipe error” in Java, you would do: @stackify search null pointer error [java] How i achieved it: Python. Python urllib. Python Slackclient. Some Stack Overflow URL manipulations. I self hosted this bot for the community and you can find it here and also deploy it for your community. Gitify Slackbot This slack bot helps you to search github for users, repositories, codes, issues, and wikis. E.g to search for anything on me on github: @gitify search mczlatan The above will send a json response with links to wikis, users, repos, codes, etc. It can still be optimized to search for just one catergory. How i achieved it: Python. Python json. Python urllib. Python Slackclient. Some Github URL manipulations. I self hosted this bot for the community and you can find it here and also deploy it for your community. Development Want to contribute? Great! Fork the projects, send in a pull request. Cheers!!!"},{"title":"Storage for Usage","url":"/storage-for-usage/","tags":["storage","javascript","offline","online","web","hybrid","app","localstorage","sqlite","pouchdb","lokijs","databases","browser","chrome","mobile"],"body":"“Sto” well to avoid “rage” That your awesome (Web or Hybrid) app would be awescome if your users could use it offline. Up until now when my current employer is starting to preach about offline capable mobile apps, i have never bothered about building offline capable apps. My employer’s preaching got to me and i decided to look into developing proper offline capable mobile apps that even support offline login and authentication and some basic crud operations. Spells that make it possible Personally, i have a good habit i think other developers should also adapt. I took my time to search and understand the different ways i could go about implementing a good solution, rather than “follow trend”. Sometimes trending technology could be the best solution too, but better understanding of all available options allows you make better and informed decisions. After looking stuff around, i ended up with a number of options for implementation. Localstorage SQLite PouchDB LokiJS Localstorage Localstorage is the most common method and simples of storing in app data. It allows you to store data in key-value pairs. It has a limit of 5mb accross all platforms (Android and iOS). You shouldn’t use this for data you want to persist. iOS clears the data once the OS is low in memory and there are reports of data loss also on Android. If you are fetching data from a server, this would be a great way to save the data and usse in app rather than making multiple API calls for the same data. It can only store strings. It can store objects and array too but you’ll have to convert them to JSON for storing and retrieving. There are frameworks built on top of localstorage such as ngStorage and localForage. A simple usage in code might look like: // simple example localStorage.setItem('country', 'nigeria'); var name = localStorage.getItem('country'); console.log(name); // complex example var records = [ {country: 'nigeria', no_of_states: 36 }, { country: 'usa', no_of_states: 50 } ]; localStorage.setItem('records', JSON.stringify(records)); var output = JSON.parse(localStorage.getItem('records')); console.table(output); SQLite Basically, SQLite is an embedded SQL database. So rather than have your database separate from your application, you have it in your application. If you are familiar with SQL you shouldn’t have a problem with this. I’ll be using the cordova-sqlite-storage as a basis for this discussion. It has support on all major platform. It uses SQL syntax, although there are a few differences between SQL and SQLite commands. There seems to be no limit to the size but after digging deep trying to find the limit, there was an issue raised on github that limited the size to about a 100mb. Data loss depends on you following good practices or not. There’s a guide here on how to avoid data loss when using this as your storage. Be careful with BLOBs. Find a more comprehensive note on some pitfalls here. A simple usage in code might look like: // to open a database var db = null; document.addEventListener('deviceready', function() { db = window.sqlitePlugin.openDatabase({name: 'countries.db', location: 'default'}); }); // to populate a database db.transaction(function(tx) { tx.executeSql('CREATE TABLE IF NOT EXISTS Countries (name, no_of_states)'); tx.executeSql('INSERT INTO Countries VALUES (?,?)', ['nigeria', 36]); tx.executeSql('INSERT INTO Countries VALUES (?,?)', ['usa', 50]); }, function(error) { console.log('Transaction ERROR: ' + error.message); }, function() { console.log('Populated database OK'); }); // to retrieve data from a database db.transaction(function(tx) { tx.executeSql('SELECT count(*) AS FROM Countries', [], function(tx, rs) { console.log('Record count (expected to be 2): ' + rs.rows.item(0).mycount); }, function(tx, error) { console.log('SELECT error: ' + error.message); }); }); PouchDB PouchDB is an open-source JavaScript database inspired by Apache CouchDB. It uses IndexedDB under the hood and falling back to WebSQL where IndexedDB isn’t supported. You can use it with Angular, React, Ember, Backbone, or your framework of choice. It uses the NoSQL syntax. Supported on most modern platforms. Since it’s NoSQL, you can directly store JSON data and retrieve it as it is. It can store up to 250mb of data. It comes with a built in function that allows you to sync your offline data with your cloud databases instances that implement a CouchDB-like protocol, and PouchDB. Sadly you can’t sync with MongoDB yet (of date). BLOBs? No problem. There are frameworks/adapters built on top of it such as angular-pouchdb, ngPouch, ng-pouchdb, vue-pouch, kendo-pouchdb, etc. A simple usage in code might look like: // create a new local database var db = new PouchDB('countries'); // create a new remote database var db = new PouchDB('http://localhost:5984/countries'); // storing a document var doc = { \"_id\": \"c1\", \"name\": \"nigeria\", \"no_of_states\": 36 }; db.put(doc); // retrieving asynchronously by _id the callback way db.get('c1', function (error, doc) { if (error) { // error stuffs } else { // do some stuff with our doc } }); // retrieving asynchronously by _id using promise db.get('c1').then(function (doc) { // do some stuff with our doc }).catch(function (err) { // error stuffs }); LokiJS LokiJS is a lightweight javascript document oriented database. It is intended to be used as an in-memory database, with the possibility of persisting the data.LokiJS draws inspiration from MongoDB and CouchDB, in that the API is similar (but not identical or compliant) to MongoDB. The glossary used is also classic NoSQL in that records are documents, documents are stored in collections.LokiJS supports a limited form of indexing for faster document access. The id field in particular is automaticallly populated and indexed, and searched using the binary search algorithm. Other document properties can be indexed for faster search on a particular object field. Fast Performance. Replaces SQLite in Cordova, works as a session store and full blown NoSQL. DB in node.js, works as in-browser database with syncing capabilities. Indexing, Secondary Indexing, Unique Indexing. The “Dynamic View”, a kind of “live filter” (self-materializing views). Persistence Adapters (with a built-in IndexedDB and node.js FS adapter). Optional periodic autosave. Changes API which keeps track of all the changes made to the local database. You can use this API to synchronize our cloud database. Compound sort for sorting on multiple columns. // Creating a database var db = new loki('example.db'); // Add a collection : var countries = db.addCollection('countries'); // Insert documents countries.insert({ name: 'usa', no_of_states: 50, }); // alternatively, insert array of documents countries.insert([ {name: 'usa', no_of_states: 50}, {name: 'nigeria', no_of_states: 36} ]); // Simple find query var results = countries.find({ no_of_states: {'$gte': 36} }); var result = countries.findOne({ name: 'nigeria' }); In conclusion After my little research into these technologies and comparing the scope of the offline application i want to build, i have made a decision on the tech to use. As developers we should do research into the tools and tech we use for projects so we don’t end up with something overkill or underkill. Cheers!!!"},{"title":"GraphQL and Chill","url":"/graphql-and-chill/","tags":["graphql","PWA","REST","API"],"body":"Yaay guys, this will be the first guest post on my blog and I’m super excited. I got a request from a friend. He had been following up with my post and wanted to feature, so why not? Let’s Meet Ajani Eniola I’m Ajani Eniola and here are a couple of interesting things about me: Progressive Web Application (PWA) Developer. I also do MEAN Stack Development. I preach RxJS observables. I’m probably one of the few tall guys in the world that don’t play basketball. I love slow music too. Inspiration Can REST truly be replaced? If you had asked me this question exactly 9:05 am August 11 2017, trust me my reply would have been “ko le work”. I should have been at the last meetup at Andela but because of a couple of unplanned events, I was unable to attend. While going through pictures from the event on twitter, I saw a slide from a presentation made by @timigod on GraphQL. Since then, I picked up interest in it and also discovered technologies like Apollo and Relay. GraphQL Experience GraphQL has been around since 2012 and used internally at Facebook but became open source for the public this year. Big boys like Github currently have their public APIs built on GraphQL. While getting my hands dirty, I played around with GraphCool and Scaphold which are pretty good GraphQL Servers. After some reading and trial and errors, I was able to build my own graphql server using MongoDB, Express JS and NodeJS. I hooked this spectacular backend to my front end that runs on angular2 apollo for handling request from the GraphQL backend. The purpose of this experiment was to compare the time required for both a GraphQL Server and A RESTful API to handle and process a request. After setting up the two different environment, the GraphQL server used 5.22ms to return data to the client, while the RESTful API took 131.87ms to return the same data to the same client. I bet even The Flash can’t beat that!!! In conclusion In terms of access to the open source community, GraphQL is still in its early stages. There are still a lot of debates about it which will have effects on the adoption rate, but from this basic experiment, it is safe to say GraphQL is very fast in fetching data from a server and should be given a shot by developers. Development My GraphQL server is hosted on Github. Want to contribute? Great! Fork the project and send in a pull request. Also feel free to Tweet at me, I’ll be glad to brainstorm with you. Cheers!!!"},{"title":"Mama PUT, Aboki PATCH","url":"/mama-put-aboki-patch/","tags":["REST","API","HTTP","aboki"],"body":"Lol, I very much know the title of this blog sounds out of place but don’t pay much attention to it just yet. Big terms used in this post Below are some of the big words in this post: Mama Put: The local food vendor that sells the most delicious food in your area. If you are in Lagos, Nigeria, this is a list of the best Mama Puts in town. Aboki: An Hausa word that means “Friend”. But in Lagos, it’s used to refer to men from the Hausa tribe from the Northern part of Nigeria that do menial jobs like Okada driving, sewing of clothes in a local area, waste disposal and management, etc. Iya Tunde: The name of the Mama Put in my area. Idempotency: It has nothing to do with being potent or not. Just see it as a flashy word for now. Inspiration for this post and title Last Saturday, i had nowhere to go to and was super lazy. After dragging myself off my bed at about 1pm, i was hungry and needed to get something to eat. I decided to look for Mama Put. My search was successful. I found a neat place, she had a variety of food to pick from, the food looked super delicious. It was a cool Saturday, so i decided to eat at her place, observe the environment and receive breeze rather than taking the food back home with me. After devouring round one of the food, i looked up to ask Iya Tunde to “PUT” more food for me then i noticed an Aboki not far off “PATCHing” the clothes of one of his customers. Then i said to myself, “What a scenario! A very good way to explain HTTP methods PUT and PATCH with their use cases while building APIs!!!” Introduction HTTP methods are simply action words used to perform certain actions over HTTP. Most tutorials you’ll find on the internet make use of four popular methods but there are more than four methods that could be used depending on the kind and functions of the API you want to build. Sn Method Meaning 1 GET Fetch an existing resource from a host. 2 POST Create a new resource on a host. 3 PUT Replace a resource on a host with a new resource. 4 DELETE Remove a resource on a host. 5 PATCH Modify a resource on a host. 6 OPTIONS Specifies communication options for a resource on a host. 7 HEAD Same as the GET method but it only sends back the Status and headers if access to the resource is successful. 8 CONNECT Establishes a tunnel to a host. 9 TRACE Performs a message loopback test along the path to a target resource. Mama PUT From the scenario in the inspiration for this post, I needed to replace the devoured food from the first round. This is the right use case for the PUT method. The PUT should be used when we want to update a resource (update the content of my plate like i was about to ask Iya Tunde to do). There are a couple of downside to using PUT to update a resource We would be asking clients to send the entire resource. Sending a complete resource representation utilizes more bandwidth. Example: PUT /users/userId123 { \"email\": \"user123@example.ng\", \"balance\": 12000 } Aboki PATCH From the scenario in the inspiration for this post, Before you give the Aboki your clothes to patch, you need to describe and show him the area of the cloth to patch. This is also the way PATCH works. The biggest challenge with this method is: Its usage misunderstood. The PATCH method requests that a set of changes, described in the request entity, must be applied to the resource identified by the request’s URI. This set contains instructions describing how a resource currently residing on the origin server should be modified to produce a new version. Wrong Example Usage 1: PATCH /users/userId123 { \"balance\": 10000 } Wrong Example Usage 2: PATCH /users/userId123?balance=15000 Correct Example Usage: PATCH /users/userId123 [ { \"op\": \"replace\", \"path\": \"/balance\", \"value\": 50000 } ] Some Questions There have been some questions, confusion about PUT and PATCH. What on earth is “Idempotence”? Why isn’t PATCH idempotent if it is a special case of PUT, which is idempotent? Why PATCH is not safe when compared to PUT or POST? Question 1 What on earth is Idempotence? restapitutorial.com has done a great job in explaining what this is. From a RESTful service standpoint, for an operation (or service call) to be idempotent, clients can make that same call repeatedly while producing the same result. In other words, making multiple identical requests has the same effect as making a single request. Note that while idempotent operations produce the same result on the server (no side effects), the response itself may not be the same (e.g. a resource’s state may change between requests). The PUT and DELETE methods are defined to be idempotent. However, there is a caveat on DELETE. The problem with DELETE, which if successful would normally return a 200 (OK) or 204 (No Content), will often return a 404 (Not Found) on subsequent calls, unless the service is configured to “mark” resources for deletion without actually deleting them. However, when the service actually deletes the resource, the next call will not find the resource to delete it and return a 404. However, the state on the server is the same after each DELETE call, but the response is different. GET, HEAD, OPTIONS and TRACE methods are defined as safe, meaning they are only intended for retrieving data. This makes them idempotent as well since multiple, identical requests will behave the same. Question 2 Why isn’t PATCH idempotent if it is a special case of PUT, which is idempotent? A very simple answer would be because PUT contains a “new representation” of a resource, while PATCH contain “a set of changes” to a resource. Question 3 Why PATCH is not safe when compared to PUT or POST? Safe in terms of REST refers to wether a method can modify a resource. From this meaning, neither PATCH, PUT, POST, DELETE or CONNECT is safe. GET, HEAD and OPTIONS are safe. Extras Mozila Web Doc on HTTP PUT Mozila Web Doc on HTTP PATCH Indempotence in Cows and REST APIs on Youtube Conclusion I hope i have been able to show you the difference and use cases rather than confuse you about HTTP PUT and PATCH ✌✌✌✌✌✌✌✌✌✌ Also feel free to Tweet at me, It would be a priviledge to chat with you. Cheers!!!"},{"title":"Captain Freeze","url":"/captain-freeze/","tags":["python","security","hacker","pip","pypi","freeze","malware"],"body":"If you still use Python 2.7, let me see your hands up 👋. Don’t be shy about it. Python Clock shows a count down to an assumed date when Python 2.7 will no longer be maintained. Time to start embracing Python 3.x. Do you agree? Python is a great language, useful in many ways, it has a large community, lots and lots of libraries, easy to use package manager, etc, etc. As time goes by and you work on different projects, you end up installing so many packages. Some of these pakages maybe used accross different projects, and some you’ll never use again. The Concern Security Last month, 10 Malicious packages were found on PYPI. I’m not sure how many of us out there heard of this news. Just to be sure you are safe, you might want to run the command below and if any of the packages are found, you should uninstall them and reinstall the original package: pip freeze | grep 'acqusition\\|apidev-coop\\|bzip\\|crypt\\|django-server\\|pwd\\|setup-tools\\|telnet\\|urlib3\\|urllib' | grep -v 'acquisition\\|apidev-coop_cms\\|bz2file\\|crypto\\|django-server-guardian-api\\|pwdhash\\|setuptools\\|telnetsrvlib\\|urllib3' Security breaches come in many forms. Most exploits are usually carried out on outdated softwares (well except for zero days). This made me realize that I had a lot of outdated packages and this means I was open to vulnerabilities and I also lacked bug fixes and new features in libraries I had installed. Updating like a boss 😎 python -c 'import pip, subprocess; [subprocess.call(\"pip install -U \" + package.project_name, shell=1) for package in pip.get_installed_distributions()]' SPOILER: understanding list comprehension is needed to understand the command above. -c argument which allows you pass in small valid python codes as a string from your terminal for package in pip.get_installed_distributions() iterates over every of your installed packages, and for every package, it appends the package name package.project_name to the pip install -U command. subprocess.call() is a function defined in the subprocess package and what it does is to take commands run them like it’s from your terminal. In conclusion Always keep your libraries, softwares, and operating systems up to date. Yea, keep your self updated too by following me on twitter. I tweet and retweet about the latest dev and sec stuffs. Cheers!!! ✌✌✌"},{"title":"Something Light","url":"/something-light/","tags":["javascript","yoruba-names","git","github","nodejs","mocha","travis-ci","webpack","es6"],"body":"I mean, 2017 has been a great year for me so far. I started writing Javascript in March. It’s October and I can build solid scalable web apps using the MEAN stack. I write TypeScript to a solid level. And to top it, I can write micro libraries too. Whoa! A year full of Javascript. yoruba-names I had dirty data scraped off yorubaname.com for a while now and I didn’t know what to do with it. I decided to build a JavaScript library around it. yoruba-names allows you to generate a random yoruba name. You can combine two names also to get a full name, and you can return any specifeid amount of names you want generated too. Challenges I had no idea how or where to start from I knew this would be a lot of work I was scared because i didn’t want this to be another half way abandoned project lost somewhere on my computer. How I started Google everything literally Took a course on eggheads.io that was remendously helpful Tools I used Git and Github NodeJS and NPM Mocha and Chai for testing Semantic-Release-Cli for automatic deployment and release Commitizen for writing and making proper commits TravisCI for Continious Integrations Ghooks for automatically running tests before commits Istanbul and CodeCov for code coverage WebPack and Babel for building and compiling for browser Experience Jesus Christ, it was haaaaaaarrrrrrrdddddddd, I won’t sugar coat it. Like this is the simplest form of a JavaScript micro library and it was this hard? But nevertheless: It was hard one more time It was fun Learnt a lot about tools used in building from scratch to deployment I learnt a bit of ES6 I felt like i was progressing (I am actually) In conclusion Lol, I really don’t know how to conclude but I hope you understand. If you’ve got questions about yoruba-names or tools I used when building, tweet at me. I tweet and retweet about the latest dev and sec stuffs. Cheers!!! ✌✌✌"},{"title":"Jekyll and Chill","url":"/jekyll-and-chill/","tags":["jekyll","whogohost","github","DNS","zoho","google","adsense","analytics"],"body":"Currently writing this blog post. Please check back soon or tweet at me if you want to be notified when i publish the post."},{"title":"Yoruba-Names","url":"/yoruba-names-javascript/","tags":["javascript","yoruba-names","git","github","nodejs","mocha","travis-ci","webpack","es6","npm"],"body":"Yoruba-Names is an opensource micro javascript library . And before you ask: It’s GNU 3.0 licensed! Easy to setup npm install --save yoruba-names Easy to use var yorubaNames = require('yoruba-names'); // Get a random Yoruba name console.log(yorubaNames.random()); // Get a random number of Yoruba names console.log(yorubaNames.random(2)); // Get a random Yoruba fullname console.log(yorubaNames.random() + \" \" + yorubaNames.random()); Wow even in our browsers Get a random name Get a random number of names Contribute Found a bug? Have a good idea for improving Yoruba-Names? Head over to the github page and create a new ticket or fork. You can also directly add issues and feature requests to the issue tracker. If you just want to chat with me, my twitter is here"},{"title":"Tours With A Lagos Nomad","url":"/tours-with-lagos-nomad/","tags":["lagos","nomad","nigeria","tour","travel","review","explore","fun"],"body":"If you’ve been having boring weekends and holidays, say no more !!!, I’ll be organizing local tours within Lagos and beyond. We’ll be … Visiting Historic places, chill out spots, resorts, ranches, the beaches, art galleries, clubs, local resturants. Having fun while rendering certain community services. Doing it for the gram. Exploring and experiencing parts of our cities we never could imagine. Most importantly, learning and living life. Why you should be part of the tours It’s going to be a lot fun. You’ll learn a lot. You get to know your city, see it and experience it in a different way every time. Expand your network of friends and professionals. For the culture, you should always… Bring extra cash aside the tour fee. Bring edibles for yourself and the gang. Bring drinks for yourself and the gang. A couple of conviniencies. Pick from this list. Be security concious and remain safe while learning and having fun. Stay up to date with info via WhatsApp Twitter Instagram"},{"title":"Reverse Engineering Hybrid Mobile Apps - For Fun and Profit (Part 1)","url":"/reverse-engineering-hybrid/","tags":["javascript","ionic","cordova","hybrid","android","ios","app","mobile","hacker"],"body":"Whenever you plan to develop a mobile app, there are usually two approaches to choose from: The native way The hybrid way Each approach has its own pros and cons depending on the features of what you’re building, your budget, project timeline, user experience, present and future maintenance, and the skills and number of your developers. Hybrid Mobile Apps A high level description of an hybrid mobile is a webview running inside a native container. Your application code is bundled into a webview and rendered in a native container on a mobile phone. Simply explaining, Hybrid applications allow you to write your application code in your already familiar web languages - HTML, CSS, Javascript and compile them together to give you a mobile app that will run on any mobile platform - iOS, Android, Blackberry, Windows, etc. Upwork, a freelancer website has a very good explanation on what hybrid mobile app are and how they work. Some Pros of Hybrid Mobile Apps It’s cross-platfrom: You only one codebase for all platforms - iOS, Android, Blackberry, Windows, etc. Learning curve is easy: Since you can leverage on exixting web technology skills. You save time and money: You don’t have to pay developers to build for different platforms and therefore directly reduce the time spent developing the app. Scaling is easy: Once you build for a platform, you basically just have to compile again for another platform and that’s it. Native Features: You still have access to the underlying features of the mobile device like camera, touchid, vibration, etc. There are plugins/library that enable this. Some Cons of Hybrid Mobile Apps Performance This is the biggest drawback of hybrid apps. They can be slow and irresponsive. Since they run in a webview they are only as good as the webview they run in. User Exxperience Hybrid applications look and feel different from native apps. Yes, because they run in a webview. Security Hybrid applications are not secure. They can easily be re-engineered and most developers don’t go the extra mile to secure the application. Conclusion We now have a basic understanding of what Hybrid appications are and how they work and can proceed to reverse engineering them in the part 2. I’ll be using a demo application i built in my previous blog post here, you can download the application .apk file here. and we can dive into action in the part 2. Also feel free to Tweet at me, It would be a priviledge to chat with you. Cheers!!!"},{"title":"TWLN: Cafe Néo Review","url":"/twlm-cafe-neo-review/","tags":["lagos","nomad","nigeria","tour","travel","review","explore","fun","coffee","cafe","neo","victoria","island","programmer","caffiene"],"body":"Cafe Neo boasts to be the biggest and Nigeria’s fastest fastest-growing coffee chain with about ten outlets in Lagos alone. Neo, means “gift” in Tswana and this encapsulates their view of coffee as a resource that should be shared and cherished. Cafe Neo fine coffee is grown in Africa. In a state today where many of our best minds face fundamental roadblocks that inhibit their progress (lack of power, internet, etc.), Cafe Neo also offers has a co-working space in their stores. Working from the co-work space gives you access to power, condusive working environment, more focus as there's less distractions and even treat yoyrself to some cups of coffee. Boomerang by Lagos Nomad My Experience I was on my way back from Surulere to work when the rain caught me on the road, luckily enough for me it didn't beat me too much. I decided to stop by the the Cafe Neo store at Sanusi Fafunwa, Victoria Island. It was quite empty because i was expecting Lagosians to be there buying coffee for the weather. I particularly liked the Large chalkboard menu behind the counter. It showed all that was on the menu and the price. From hot drinks like Cappuccino, Caramel Macchiato, Espresso, Americano, Cafe Latte, Cafe Mocha, etc, to cold drinks like Bubble Tea, Caramel Frappucino, Iced Cafe Mocha. The pastries also caught my eyes, especially the Carrot Cake and Croissant. Images by Lagos Nomad It was a good first time visit to Cafe Neo and it was a good one. My Coffee was perfect, my Carrot Cake was yummy, the co-working space was comfortable and i would definitely go back there to work for maybe a whole day for more experience. Extra Info I put together a list of Cafe Neo stores Cafe Neo Outlets are usually opened 7am - 8pm on weekedays, opens 10am to 6pm on Saturdays and are closed on Sundays Website: http://www.mycafeneo.com/ Instagram: @mycafeneo Call: 09085094726 Gallery For more images, you can check out my Cafe Neo Highlight on Instagram Images by Lagos Nomad Stay up to date with info via WhatsApp Twitter Instagram"},{"title":"Investigating Shortened URLs","url":"/investigating-shortened-urls/","tags":["osint","hacker","web","malware","investigations","security"],"body":"This blog post is currently in the drafts."}]}